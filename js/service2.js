// ุฏุงูุฉ ูุฅุธูุงุฑ ุงูุนูุงุตุฑ
function showelement() {
  const div2 = document.querySelector(".transparent-card");
  const div4 = document.querySelector(".transparent-card2");
  const div5 = document.querySelector(".transparent-card3");
  const div6 = document.querySelector(".transparent-card4");
  const div7 = document.querySelector(".transparent-card5");
  const div3 = document.querySelector(".nav-top");

  div2.style.visibility = "visible";
  div3.style.visibility = "visible";
  div4.style.visibility = "visible";
  div5.style.visibility = "visible";
  div6.style.visibility = "visible";
  div7.style.visibility = "visible";
}

// ุฏุงูุฉ ูุฅุฎูุงุก ุงูุนูุงุตุฑ
function hideelement() {
  const div2 = document.querySelector(".transparent-card");
  const div4 = document.querySelector(".transparent-card2");
  const div5 = document.querySelector(".transparent-card3");
  const div6 = document.querySelector(".transparent-card4");
  const div7 = document.querySelector(".transparent-card5");
  const div3 = document.querySelector(".nav-top");
  div2.style.visibility = "hidden";
  div3.style.visibility = "hidden";
  div4.style.visibility = "hidden";
  div5.style.visibility = "hidden";
  div6.style.visibility = "hidden";
  div7.style.visibility = "hidden";
}
//#####################################################################################################################

// ุฏุงูุฉ ุชูููุฐ ุนูุฏ ูุฌุงุญ ุฌูุจ ุงููููุน ุงูุฌุบุฑุงูู
function onSuccess() {
  hideelement();

  let locationApiKey = "ููุง ุชุถุน ููุชุงุญ"; // www.opencagedata.com - API ููุญุตูู ุนูู ูููุนู ุจุฏูู
  let weatherApiKey = "ููุง ุชุถุน ููุชุงุญ"; // www.openweathermap.org - API ููุญุตูู ุนูู ูุนูููุงุช ุงูุทูุณ

  const savedLocation = localStorage.getItem("userLocation");
  let { latitude, longitude } = JSON.parse(savedLocation);

  // ุงุณุชุฏุนุงุก API ููุญุตูู ุนูู ุงููููุน
  fetch(
    `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=${locationApiKey}`
  )
    .then((response) => response.json())
    .then((data) => {
      let allDetails = data.results[0].components;

      let { city, suburb } = allDetails;
      document.getElementById(
        "loca-weather2"
      ).innerText = `${city} - ${suburb}`;

      let apiUrl = "https://api.openweathermap.org/data/2.5/weather";

      return fetch(
        `${apiUrl}?lat=${latitude}&lon=${longitude}&appid=${weatherApiKey}&units=metric`
      );
    })

    .then((responsee) => responsee.json())
    .then((dataa) => {
      let { main, weather } = dataa;
      let { temp_max, temp_min } = main;
      let { description } = weather[0];

      let main1 = dataa.weather[0].main;

      document.getElementById("temp_max").innerText = `${~~temp_max}ยฐC`;
      document.getElementById("description").innerText = `${geTtrinslate(
        description
      )}`;

      let apiUrl2 = "https://api.openweathermap.org/data/2.5/forecast?";
      lottie.loadAnimation({
        container: document.getElementById("Lottie2"),
        path: getWetherstate(main1),
        renderer: "svg",
        loop: true,
        autoplay: true,
      });

      fetch(
        `${apiUrl2}lat=${latitude}&lon=${longitude}&cnt=7&appid=${weatherApiKey}&units=metric`
      )
        .then((responseee) => responseee.json())
        .then((dataaa) => {
          let { city } = dataaa;
          let { name } = city;

          fetch(
            // ูุฐุง ูููุน ููุชูุญ ุงููุตุฏุฑ ููุทูุณ ูุฏ ุชุญุชุงุฌ ุงูู ุฑุงุจุท ุฌุฏูุฏ ูู ูุง ูุญุชุงุฌ ุงูู ููุชุงุญ API
            `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&daily=weather_code,temperature_2m_max,temperature_2m_min`
          )
            .then((response) => response.json())
            .then((data) => {
              const { daily } = data;
              const { temperature_2m_max, temperature_2m_min, weather_code } =
                daily;

              const dailyday = {};

              daily.time.forEach((time, index) => {
                const maxTemp = temperature_2m_max[index];
                const minTemp = temperature_2m_min[index];
                const code = weather_code[index];

                if (!dailyday[time]) {
                  dailyday[time] = [];
                }
                dailyday[time].push({ maxTemp, minTemp, code });
              });

              const dayDiv2 = document.getElementById("card-body4");
              dayDiv2.style.display = "flex";
              dayDiv2.style.flexDirection = "row";
              dayDiv2.style.alignItems = "Center";
              dayDiv2.style.direction = "rtl";
              dayDiv2.style.fontSize = "21px";
              dayDiv2.style.fontWeight = "bold";
              dayDiv2.style.fontFamily = "Scheherazade, serif";
              dayDiv2.style.overflow = "scroll";
              dayDiv2.style.scrollbarWidth = "none";
              dayDiv2.style.color = "rgb(0, 0, 0)";
              dayDiv2.style.justifyContent = "center";
              dayDiv2.style.margin = "6px";

              for (const [date, details] of Object.entries(dailyday)) {
                details.forEach((detail) => {
                  const allday1 = document.createElement("span");
                  allday1.innerText = `${getDate(
                    date
                  )}|\n${~~detail.maxTemp}ยฐ \n${~~detail.minTemp}ยฐ\n${getcodestate(
                    detail.code
                  )}`;

                  dayDiv2.appendChild(allday1);
                });
              }
            })
            .catch((error) => showErrorAnimation());

          const dailyForecasts = {};

          // ุชูุณูู ุงูุจูุงูุงุช ุฅูู ุฃูุงู
          dataaa.list.map((item) => {
            const date = item.dt_txt.split(" ")[0];
            if (!dailyForecasts[date]) {
              dailyForecasts[date] = [];
            }
            dailyForecasts[date].push(item || {});
          });

          for (const [date, forecasts] of Object.entries(dailyForecasts)) {
            const dayDiv = document.getElementById("transparent-card2");
            dayDiv.style.display = "flex";
            dayDiv.style.flexDirection = "column";
            dayDiv.style.alignItems = "Center";
            dayDiv.style.direction = "rtl";
            dayDiv.style.borderRadius = "19px";
            dayDiv.style.overflow = "auto";
            dayDiv.style.scrollbarWidth = "none";
            dayDiv.style.color = "rgb(0, 0, 0)";

            forecasts.forEach((forecast) => {
              const time = forecast.dt_txt.split(" ")[1];
              const temp = forecast.main.temp;
              const hh = time.split(":")[0];
              const description = forecast.weather[0].description;
              const period = hh < 12 ? "ุต" : "ู";
              const formattedTime = `${hh} ${period}`;

              const dayLabel = document.createElement("p");
              dayDiv.appendChild(dayLabel);
              dayLabel.style.margin = "5px 0";
              dayLabel.style.color = "rgb(0, 0, 0)";
              dayLabel.style.fontSize = "29px";
              dayLabel.style.fontFamily = "Scheherazade, serif";
              dayLabel.style.fontWeight = "bold";
              dayLabel.style.direction = "ltr";

              const descriptionSpan = document.createElement("span");
              descriptionSpan.innerText = ` ${getWetherstateday(
                description
              )}   `;

              const tempSpan = document.createElement("span");
              tempSpan.innerText = `${~~temp}ยฐC`;

              const timeSpan = document.createElement("span");
              timeSpan.innerText = `${formattedTime}`;
              timeSpan.style.fontSize = "12px";
              timeSpan.style.color = "rgb(0, 0, 0)";

              dayLabel.appendChild(descriptionSpan);
              dayLabel.appendChild(tempSpan);
              dayLabel.appendChild(timeSpan);
            });
          }

          showelement();
        })
        .catch((error) => {
          showErrorAnimation();
        });
      // ุชุญููู ุงูููุดู ุญุงูุฉ ุงูุทูุณ
    })

    .catch((error) => {
      showErrorAnimation();
    });
}

// ุฏุงูุฉ ูุฅุฎูุงุก ูุคุดุฑ ุงูุชุญููู ูู ุญุงูุฉ ุญุฏูุซ ุฎุทุฃ ^!^

onSuccess();

function showErrorAnimation() {
  hideelement();
  lottie.loadAnimation({
    container: document.getElementById("Lottie3"),
    path: "/assets/error.json",
    renderer: "svg",
    loop: true,
    autoplay: true,
  });
}

function getWetherstateday(description) {
  const weatherStates = {
    "clear sky": "โ๏ธ",
    "ุดูุณ ุฎุงูุชุฉ": "โ๏ธ",
    "ุถูุก ุงูุดูุณ": "โ๏ธ",
    "ุถูุกุงูุดูุณ ุฎุงูุช": "โ๏ธ",
    "ุตุงูู ุบุงูุจูุง": "โ๏ธ",
    "ุดูุณ ูุดุฑูุฉ": "โ๏ธ",
    "ุดูุณ ูุดุฑูุฉ ุณุงุทุนุฉ": "โ๏ธ",
    ุดูุณ: "โ๏ธ",
    ูุดูุณ: "โ๏ธ",
    ุตุงูู: "โ๏ธ",
    "ุดูุณ ูุดุฑูุฉ ุณุงุทุนุฉ": "โ๏ธ",
    "ุดูุณ ูุดุฑูุฉ ูุตุญูุจุฉ ุจุจุนุถ ุงูุบููู": "๐ค๏ธ",
    "few clouds": "๐ค๏ธ",
    "ูุดูุณ ูู ุงูุบุงูุจ": "๐ค๏ธ",
    "ุณุญุจ ูุดูุณ": "๐ค๏ธ",
    "ูุดูุณ ุฌุฒุฆููุง": "๐ค๏ธ",
    "ูุดูุณ ุบุงูุจูุง": "๐ค๏ธ",
    "ุงูุณุญุจ ุงููุชูุทุนุฉ": "๐ค๏ธ",
    "ุชุญุฌุจ ุงูุบููู ุจุนุถ ุงูุดูุณ": "๐ค๏ธ",
    "ูุดูุณ ุฅูู ุบุงุฆู ุฌุฒุฆููุง": "๐ค๏ธ",
    "scattered clouds": "๐ฅ๏ธ",
    "ุบุงุฆู ูู ุงูุบุงูุจ": "๐ฅ๏ธ",
    "ุบุงุฆู ุฌุฒุฆููุง": "๐ฅ๏ธ",
    ุบุงุฆู: "โ๏ธ",
    "broken clouds": "โ๏ธ",
    "ูุฆูุจ (ููุจุฏ ุจุงูุบููู)": "โ๏ธ",
    "ุณุญุจ ูุชุฒุงูุฏ": "โ๏ธ",
    "shower rain": "๐ง๏ธ",
    "ุจุถุน ุฒุฎุงุช ูุทุฑ": "๐ง๏ธ",
    "ูุทุฑ ูุฑุฐุงุฐ ุนุฑุถู": "๐ง๏ธ",
    ุงูุงุณุชุญูุงู: "๐ง๏ธ",
    "ูุฑุตุฉ ูุณููุท ุฃูุทุงุฑ": "๐ง๏ธ",
    "ุฒุฎุงุช ูุทุฑ ูุฌูุฒุฉ": "๐ง๏ธ",
    "ุบุงุฆู ูู ุงูุบุงูุจ ูุน ุฒุฎุงุช": "๐ง๏ธ",
    rain: "๐ง๏ธ",
    "ูุดูุณ ูู ุงูุบุงูุจ ูุน ุฒุฎุงุช": "๐ง๏ธ",
    ูุทุฑ: "๐ง๏ธ",
    ุฃูุทุงุฑ: "๐ง๏ธ",
    "ูููู ูู ุงููุทุฑ": "๐ง๏ธ",
    "ูุชุฑุงุช ูู ุงููุทุฑ": "๐ง๏ธ",
    thunderstorm: "โ๏ธ",
    "ุชู - ุงูุนูุงุตู": "โ๏ธ",
    ุญุงุฑ: "๐ก๏ธ",
    haze: "๐ก๏ธ",
    hot: "๐ก๏ธ",
    ุจุฑุฏ: "โ๏ธ",
    cold: "โ๏ธ",
    snow: "โ๏ธ",
    mist: "๐ซ๏ธ",
    "light rain": "๐ฆ๏ธ",
    Clear: "โ๏ธ",
    "Light cloud": "๐ค๏ธ",
    Clouds: "โ๏ธ",
    "overcast clouds": "โ๏ธ",
    "light intensity shower rain": "๐ง๏ธ",
    "shower rain": "๐ง๏ธ",
    "heavy intensity shower rain": "๐ง๏ธ",
    "ragged shower rain": "๐ง๏ธ",
  };
  return weatherStates[description] || "๐ก๏ธ";
}

function geTtrinslate(mains) {
  const weatherStates = {
    Clouds: "ุบุงููู",
    Tornado: "ุฅุนุตุงุฑ",
    Rain: "ูุงุทุฑ",
    Squall: "ุนุงุตูุฉ ููุงุฌุฆุฉ",
    Ash: "ุฑูุงุฏ",
    Sand: "ุฑูู",
    Mist: "ุถุจุงุจ ุฎููู",
    Smoke: "ุฏุฎุงู",
    Haze: "ุถุจุงุจ ุฎููู",
    Snow: "ุซูุฌ",
    Fog: " ุถุจุงุจ ูุซูู",
    Sand: "ุฑูู",
    Drizzle: "ุฑุฐุงุฐ",
    "Moderate rain": "ูุทุฑ ูุนุชุฏู",
    "Heavy intensity rain": "ูุทุฑ ุบุฒูุฑ",
    "Very heavy rain": "ูุทุฑ ุบุฒูุฑ ุฌุฏูุง",
    "Extreme rain": "ูุทุฑ ุดุฏูุฏ ุฌุฏูุง",
    "Freezing rain": "ูุทุฑ ูุฌูุฏ",
    "Light intensity shower rain": "ุฒุฎุงุช ูุทุฑ ุฎูููุฉ",
    "Shower rain": "ุฒุฎุงุช ูุทุฑ",
    "Heavy intensity shower rain": "ุฒุฎุงุช ูุทุฑ ุบุฒูุฑุฉ",
    "Ragged shower rain": "ุฒุฎุงุช ูุทุฑ ุฎูููุฉ",
    "Light intensity drizzle": "ุฑุฐุงุฐ ุฎููู",
    "Heavy intensity drizzle": "ุฑุฐุงุฐ ุบุฒูุฑ",
    "Light intensity drizzle rain": "ูุทุฑ ุฑุฐุงุฐ ุฎููู",
    "Drizzle rain": "ูุทุฑ ุฑุฐุงุฐ",
    "Heavy intensity drizzle rain": "ูุทุฑ ุฑุฐุงุฐ ุบุฒูุฑ",
    "Shower rain and drizzle": "ุฒุฎุงุช ูุทุฑ ูุฑุฐุงุฐ",
    "Heavy shower rain and drizzle": "ุฒุฎุงุช ูุทุฑ ูุฑุฐุงุฐ ุบุฒูุฑุฉ",
    "Shower drizzle": "ุฒุฎุงุช ุฑุฐุงุฐ",
    Thunderstorm: "ุนุงุตูุฉ ุฑุนุฏูุฉ",
    "Thunderstorm with light rain": "ุนุงุตูุฉ ุฑุนุฏูุฉ ูุน ูุทุฑ ุฎููู",
    "Thunderstorm with rain": "ุนุงุตูุฉ ุฑุนุฏูุฉ ูุน ูุทุฑ",
    "Thunderstorm with heavy rain": "ุนุงุตูุฉ ุฑุนุฏูุฉ ูุน ูุทุฑ ุบุฒูุฑ",
    "Light thunderstorm": "ุนุงุตูุฉ ุฑุนุฏูุฉ ุฎูููุฉ",
    "Heavy thunderstorm": "ุนุงุตูุฉ ุฑุนุฏูุฉ ุบุฒูุฑุฉ",
    "Ragged thunderstorm": "ุนุงุตูุฉ ุฑุนุฏูุฉ ุฎูููุฉ",
    "Thunderstorm with light drizzle": "ุนุงุตูุฉ ุฑุนุฏูุฉ ูุน ุฑุฐุงุฐ ุฎููู",
    "Thunderstorm with drizzle": "ุนุงุตูุฉ ุฑุนุฏูุฉ ูุน ุฑุฐุงุฐ",
    "Thunderstorm with heavy drizzle": "ุนุงุตูุฉ ุฑุนุฏูุฉ ูุน ุฑุฐุงุฐ ุบุฒูุฑ",
    "clear sky": "ุณูุงุก ุตุงููุฉ",
    "few clouds": "ุณุญุจ ููููุฉ",
    "scattered clouds": "ุณุญุจ ูุชุฒุงูุฏ",
    "broken clouds": "ุณุญุจ ูุชูุทุนุฉ",
    "shower rain": "ุฒุฎุงุช ูุทุฑ",
    rain: "ูุทุฑ",
    thunderstorm: "ุนุงุตูุฉ ุฑุนุฏูุฉ",
    snow: "ุซูุฌ",
    mist: "ุถุจุงุจ",
  };
  return weatherStates[mains] || "ุตุงููุฉ";
}
function getcodestate(code) {
  const codeStates = {
    0: "โ๏ธ",
    1: "๐ค๏ธ",
    2: "๐ฅ๏ธ",
    3: "โ๏ธ",
    48: "๐ซ๏ธ",
    45: "๐ซ๏ธ",
    55: "๐ฆ๏ธ",
    53: "๐ฆ๏ธ",
    51: "๐ฆ๏ธ",
    57: "๐ฆ๏ธ",
    56: "๐ฆ๏ธ",
    61: "๐ง๏ธ",
    65: "๐ง๏ธ",
    63: "๐ง๏ธ",
    67: "โ๏ธ",
    66: "โ๏ธ",
    75: "โ๏ธ",
    73: "โ๏ธ",
    71: "โ๏ธ",
    77: "โ๏ธ",
    82: "๐ง๏ธ",
    81: "๐ง๏ธ",
    80: "๐ง๏ธ",
    86: "โ๏ธ",
    85: "โ๏ธ",
    95: "โ๏ธ",
    96: "โ๏ธ",
    99: "โ๏ธ",
  };
  return codeStates[code] || "๐ก๏ธ";
}

function getDate(dateString) {
  let givenDate = new Date(dateString);
  let today = new Date();

  // ุฅุฒุงูุฉ ุงูููุช ูู ุงูุชุงุฑูุฎ ููุชุฃูุฏ ูู ุงูููุงุฑูุฉ ุชุนุชูุฏ ุนูู ุงูุชุงุฑูุฎ ููุท
  today.setHours(0, 0, 0, 0);
  givenDate.setHours(0, 0, 0, 0);

  if (givenDate.getTime() === today.getTime()) {
    return "ุงูููู";
  }

  let dayNumber = givenDate.getDay();
  let weekdays = ["ุงุญุฏ", "ุงุซููู", "ุซูุงุซุงุก", "ุงุฑุจุนุงุก", "ุฎููุณ", "ุฌูุนุฉ", "ุณุจุช"];

  // ุฅุถุงูุฉ ูุณุงูุฉ ุจุนุฏ ูู ููู ุนูุฏ ุงูุฅุฑุฌุงุน
  let dayName = weekdays[dayNumber] + "";
  return dayName;
}
